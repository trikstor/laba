/*
Структура списка для вывода совпадений.
*/
struct point
{
	int key;									 // Содержание элемента списка
	point* next;								 // Указатель на следующий элемент списка
	point* pre;									 // Указатель на предыдущий элемент списка
};

/*
Создание корневого элемента списка, возвращает корневой элемент
*/
point* make_point(int key);

/*
Вставка элемента в конец списка, возвращает указатель на последний элемент списка
*/
point* insert_elem(point *p, int item);

/*
Печать списка
*/
void listprint(point *p);

/*
Печать строки.
*/
void print_str(char *mass, int mass_l);

/*
Считывание текстового файла построчно и вызов функции поиска для каждой строки.
*/
void RFile(char *filename, char *templa, int templa_l);

/*
Дополнительная проверка совпадения строки и подстроки.
*/
bool RK_check(char *str, char *templa, int num, int templa_l);

/*
Вычисление хеша для подстроки в строке с start_index в кол-ве quantity символов.
Перебор символов подстроки и проедставление их в числовом виде.
Перевод числового варианта символа в систему счисления с основанием 13.
*/
unsigned long long int RK_hash(char *str, int start_index, int quantity);

/*
Поиск Рабина - Карпа подстроки в строке, строка str длиной в str_l символов и 
подстрока templa длиной в templa_l символов. Выичсляется хеш от шаблона и первой подстроки.
Последовательно сравниваются хеши от следующих подстрок и шаблона. Притом новый хеш для
подстроки каждый раз не вычисляется, удаляется хеш от уходящего символа и добавляется
хеш от приходящего символа. При совпадении хеша от подстроки и шаблона производится дополнительная
проверка, и только после нее записывается совпадение в список.
*/
void RK_search(char *str, char *templa, int str_l, int templa_l);