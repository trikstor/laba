/*
Структура списка для вывода совпадений.
*/
struct point
{
	int key;									 // Содержание элемента списка
	point* next;								 // Указатель на следующий элемент списка
	point* pre;									 // Указатель на предыдущий элемент списка
};
/*
Создание корневого элемента списка, возвращает корневой элемент
*/
point* make_point(int key);
/*
Вставка элемента в конец списка, возвращает указатель на последний элемент списка
*/
point* insert_elem(point *p, int item);
/*
Печать списка
*/
void listprint(point *p);
/*
Печать строки.
*/
void print_str(char *mass, int mass_l);
/*
Функция определения сдвигов для каждой буквы алфавита. Если данная буква алфавита не входит в шаблон, то
ее сдвиг равен длине шаблона. В прочих случаях сдвиг равен расстоянию от предпоследнего символа шаблона
до данного символа.
*/
void Shift(char *templa, int templa_l, int *alphabet, int *shift, int);
/*
Поиск алфавита для строки. Если данная буква находится в строке, то элементу массива с индексом, равным 
числовому представлению данного символа присваивается значение 1.
*/
int alphabetcnt(char *mass, int mass_l, int *alphabet);
/*
Поиск Бойера - Мура подстроки в строке.
Поиск подстроки в строке осуществляется с конца шаблона, сравниваются последний
символ шаблона, если он совпадает с соответствующим символом, то сверяются все
символы в направлении к началу шаблона. Если все символы совпали - записываем
совпадение и сдвигаем шаблон на всю его длину, иначе сдвигаем шаблон на длинну
сдвига соответствующего символа из строки.
*/
int BM_search(char *mass, int mass_l, char *templa, int templa_l);
/*
Считывание текстового файла построчно и вызов функции поиска для каждой строки.
*/
void RFile(char *filename, char *templa, int templa_l);